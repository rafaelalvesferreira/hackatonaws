#!/usr/bin/env python3
"""
Script de demonstra√ß√£o completo do Agente de Documentos Bedrock
"""

import os
import sys
import time
import subprocess
import requests
import json
from datetime import datetime

def print_header(title):
    """Imprime cabe√ßalho formatado"""
    print("\n" + "=" * 60)
    print(f"üéØ {title}")
    print("=" * 60)

def print_step(step, description):
    """Imprime passo da demonstra√ß√£o"""
    print(f"\nüìã PASSO {step}: {description}")
    print("-" * 40)

def check_requirements():
    """Verifica se os requisitos est√£o instalados"""
    print_step(1, "Verificando Requisitos")
    
    required_files = [
        "requirements.txt",
        "src/app.py",
        "streamlit_app.py",
        "prompts/agent_instructions.txt"
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        print("‚ùå Arquivos faltando:")
        for file in missing_files:
            print(f"   - {file}")
        return False
    
    print("‚úÖ Todos os arquivos necess√°rios encontrados")
    return True

def install_dependencies():
    """Instala depend√™ncias"""
    print_step(2, "Instalando Depend√™ncias")
    
    try:
        print("üì¶ Instalando pacotes Python...")
        result = subprocess.run([
            sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Depend√™ncias instaladas com sucesso")
            return True
        else:
            print("‚ùå Erro ao instalar depend√™ncias:")
            print(result.stderr)
            return False
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def create_sample_documents():
    """Cria documentos de exemplo"""
    print_step(3, "Criando Documentos de Exemplo")
    
    # Documento 1: Manual do Usu√°rio
    doc1_content = """# Manual do Usu√°rio - Sistema de Gest√£o

## Introdu√ß√£o
Este manual descreve como utilizar o Sistema de Gest√£o da empresa.

## Funcionalidades Principais
1. **Cadastro de Clientes**: Permite registrar novos clientes
2. **Gest√£o de Pedidos**: Controla pedidos e entregas
3. **Relat√≥rios**: Gera relat√≥rios financeiros e operacionais

## Como Usar
### Login
1. Acesse o sistema atrav√©s do navegador
2. Digite seu usu√°rio e senha
3. Clique em "Entrar"

### Cadastrar Cliente
1. V√° para o menu "Clientes"
2. Clique em "Novo Cliente"
3. Preencha os dados obrigat√≥rios
4. Salve as informa√ß√µes

## Suporte
Para suporte t√©cnico, entre em contato:
- Email: suporte@empresa.com
- Telefone: (11) 1234-5678
"""
    
    # Documento 2: Pol√≠ticas da Empresa
    doc2_content = """# Pol√≠ticas da Empresa XYZ

## Pol√≠tica de Recursos Humanos

### Hor√°rio de Trabalho
- Hor√°rio padr√£o: 8h √†s 17h
- Intervalo para almo√ßo: 12h √†s 13h
- Flexibilidade de 30 minutos na entrada

### Benef√≠cios
- Vale alimenta√ß√£o: R$ 500,00/m√™s
- Vale transporte: Conforme necessidade
- Plano de sa√∫de: Cobertura nacional
- Seguro de vida: Valor equivalente a 12 sal√°rios

### Pol√≠tica de F√©rias
- 30 dias corridos ap√≥s 12 meses de trabalho
- Possibilidade de venda de 10 dias
- Abono de 1/3 do sal√°rio

## Pol√≠tica de Seguran√ßa da Informa√ß√£o

### Senhas
- M√≠nimo de 8 caracteres
- Combina√ß√£o de letras, n√∫meros e s√≠mbolos
- Troca obrigat√≥ria a cada 90 dias

### Acesso aos Sistemas
- Cada funcion√°rio possui login √∫nico
- Acesso baseado no cargo e fun√ß√£o
- Monitoramento de atividades

### Backup de Dados
- Backup di√°rio autom√°tico
- C√≥pias armazenadas em local seguro
- Teste de restaura√ß√£o mensal
"""
    
    try:
        # Cria documentos de exemplo
        os.makedirs("documents", exist_ok=True)
        
        with open("documents/manual_usuario.txt", "w", encoding="utf-8") as f:
            f.write(doc1_content)
        
        with open("documents/politicas_empresa.txt", "w", encoding="utf-8") as f:
            f.write(doc2_content)
        
        print("‚úÖ Documentos de exemplo criados:")
        print("   - documents/manual_usuario.txt")
        print("   - documents/politicas_empresa.txt")
        
        print("\nüí° Para usar seus pr√≥prios documentos:")
        print("   - Coloque arquivos PDF/Word na pasta 'documents/'")
        print("   - Execute o reprocessamento via API ou interface")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar documentos: {e}")
        return False

def check_aws_config():
    """Verifica configura√ß√£o AWS"""
    print_step(4, "Verificando Configura√ß√£o AWS")
    
    if os.path.exists(".env"):
        print("‚úÖ Arquivo .env encontrado")
        
        # L√™ configura√ß√µes
        with open(".env", "r") as f:
            content = f.read()
            
        if "AWS_ACCESS_KEY_ID" in content and "AWS_SECRET_ACCESS_KEY" in content:
            print("‚úÖ Credenciais AWS configuradas")
            return True
        else:
            print("‚ö†Ô∏è  Credenciais AWS n√£o encontradas no .env")
    else:
        print("‚ö†Ô∏è  Arquivo .env n√£o encontrado")
    
    print("\nüîß Para configurar AWS:")
    print("   1. Copie .env.example para .env")
    print("   2. Edite .env com suas credenciais AWS")
    print("   3. Certifique-se de ter acesso ao Bedrock")
    
    return False

def start_demo_servers():
    """Inicia servidores para demonstra√ß√£o"""
    print_step(5, "Iniciando Servidores")
    
    print("üöÄ Iniciando API Flask...")
    api_process = subprocess.Popen([
        sys.executable, "run.py"
    ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    
    # Aguarda API inicializar
    print("‚è≥ Aguardando API inicializar...")
    for i in range(20):
        try:
            response = requests.get("http://localhost:5000/health", timeout=2)
            if response.status_code == 200:
                print("‚úÖ API Flask iniciada com sucesso!")
                break
        except:
            pass
        time.sleep(1)
        print(f"   Tentativa {i+1}/20...")
    else:
        print("‚ùå Timeout ao iniciar API")
        api_process.terminate()
        return None, None
    
    print("\nüé® Iniciando Interface Streamlit...")
    streamlit_process = subprocess.Popen([
        "streamlit", "run", "streamlit_app.py",
        "--server.port", "8501",
        "--server.address", "0.0.0.0",
        "--browser.gatherUsageStats", "false"
    ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    
    time.sleep(3)  # Aguarda Streamlit inicializar
    
    return api_process, streamlit_process

def run_api_tests():
    """Executa testes da API"""
    print_step(6, "Testando API")
    
    tests = [
        ("Health Check", "GET", "/health", None),
        ("Status", "GET", "/status", None),
        ("Upload Documentos", "POST", "/documents/upload", None),
    ]
    
    results = []
    
    for test_name, method, endpoint, data in tests:
        try:
            url = f"http://localhost:5000{endpoint}"
            
            if method == "GET":
                response = requests.get(url, timeout=10)
            else:
                response = requests.post(url, json=data, timeout=30)
            
            success = response.status_code == 200
            results.append((test_name, success))
            
            status = "‚úÖ PASSOU" if success else "‚ùå FALHOU"
            print(f"   {test_name}: {status}")
            
            if not success:
                print(f"      Status: {response.status_code}")
                try:
                    error = response.json().get('error', 'Erro desconhecido')
                    print(f"      Erro: {error}")
                except:
                    pass
            
        except Exception as e:
            results.append((test_name, False))
            print(f"   {test_name}: ‚ùå ERRO - {e}")
    
    # Teste de chat se outros testes passaram
    if all(result for _, result in results):
        print("\nüí¨ Testando Chat:")
        try:
            chat_data = {
                "message": "Ol√°! Quais informa√ß√µes voc√™ tem dispon√≠veis?",
                "max_results": 3
            }
            
            response = requests.post(
                "http://localhost:5000/chat",
                json=chat_data,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('success'):
                    print("   ‚úÖ Chat funcionando!")
                    print(f"   üìù Resposta: {result.get('response', '')[:100]}...")
                else:
                    print(f"   ‚ùå Erro no chat: {result.get('error', '')}")
            else:
                print(f"   ‚ùå Erro HTTP: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå Erro no teste de chat: {e}")
    
    return results

def show_final_info():
    """Mostra informa√ß√µes finais"""
    print_header("DEMONSTRA√á√ÉO CONCLU√çDA")
    
    print("üåê SERVI√áOS DISPON√çVEIS:")
    print("   ‚Ä¢ API Flask: http://localhost:5000")
    print("   ‚Ä¢ Interface Streamlit: http://localhost:8501")
    
    print("\nüîß ENDPOINTS DA API:")
    print("   ‚Ä¢ GET  /health - Health check")
    print("   ‚Ä¢ GET  /status - Status detalhado")
    print("   ‚Ä¢ POST /chat - Chat com agente")
    print("   ‚Ä¢ POST /documents/upload - Processar documentos")
    
    print("\nüé® RECURSOS DA INTERFACE:")
    print("   ‚Ä¢ üí¨ Chat interativo com o agente")
    print("   ‚Ä¢ üìù Editor de prompts em tempo real")
    print("   ‚Ä¢ üìÑ Gerenciamento de documentos")
    print("   ‚Ä¢ ‚öôÔ∏è Monitoramento do sistema")
    
    print("\nüìã PR√ìXIMOS PASSOS:")
    print("   1. Acesse http://localhost:8501 para usar a interface")
    print("   2. Configure suas credenciais AWS no arquivo .env")
    print("   3. Adicione seus documentos na pasta 'documents/'")
    print("   4. Reprocesse os documentos via interface")
    print("   5. Converse com o agente!")
    
    print("\n‚ö†Ô∏è  PARA PARAR OS SERVI√áOS:")
    print("   ‚Ä¢ Pressione Ctrl+C neste terminal")
    print("   ‚Ä¢ Ou execute: pkill -f 'python.*run.py'")
    print("   ‚Ä¢ Ou execute: pkill -f 'streamlit'")

def main():
    """Fun√ß√£o principal da demonstra√ß√£o"""
    print_header("DEMONSTRA√á√ÉO - AGENTE DE DOCUMENTOS BEDROCK")
    
    print("üéØ Esta demonstra√ß√£o ir√°:")
    print("   1. Verificar requisitos")
    print("   2. Instalar depend√™ncias")
    print("   3. Criar documentos de exemplo")
    print("   4. Verificar configura√ß√£o AWS")
    print("   5. Iniciar servidores")
    print("   6. Executar testes")
    print("   7. Mostrar informa√ß√µes finais")
    
    input("\nüöÄ Pressione Enter para come√ßar...")
    
    # Executa passos da demonstra√ß√£o
    steps = [
        ("Verificar Requisitos", check_requirements),
        ("Instalar Depend√™ncias", install_dependencies),
        ("Criar Documentos de Exemplo", create_sample_documents),
        ("Verificar Configura√ß√£o AWS", check_aws_config),
    ]
    
    for step_name, step_func in steps:
        if not step_func():
            print(f"\n‚ùå Falha em: {step_name}")
            print("üõë Demonstra√ß√£o interrompida")
            return 1
    
    # Inicia servidores
    api_process, streamlit_process = start_demo_servers()
    
    if not api_process or not streamlit_process:
        print("‚ùå Falha ao iniciar servidores")
        return 1
    
    try:
        # Executa testes
        results = run_api_tests()
        
        # Mostra informa√ß√µes finais
        show_final_info()
        
        # Aguarda interrup√ß√£o do usu√°rio
        print("\n" + "=" * 60)
        print("üéâ DEMONSTRA√á√ÉO ATIVA!")
        print("   Pressione Ctrl+C para encerrar...")
        print("=" * 60)
        
        while True:
            time.sleep(1)
            
    except KeyboardInterrupt:
        print("\n\nüëã Encerrando demonstra√ß√£o...")
        
        # Encerra processos
        if api_process:
            api_process.terminate()
            print("‚úÖ API Flask encerrada")
        
        if streamlit_process:
            streamlit_process.terminate()
            print("‚úÖ Interface Streamlit encerrada")
        
        print("üéØ Demonstra√ß√£o conclu√≠da com sucesso!")
        return 0
    
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        
        # Encerra processos em caso de erro
        if api_process:
            api_process.terminate()
        if streamlit_process:
            streamlit_process.terminate()
        
        return 1

if __name__ == '__main__':
    sys.exit(main())
